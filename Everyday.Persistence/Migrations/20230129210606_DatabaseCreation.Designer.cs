// <auto-generated />
using System;
using Everyday.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Everyday.Persistence.Migrations
{
    [DbContext(typeof(EverydayDbContext))]
    [Migration("20230129210606_DatabaseCreation")]
    partial class DatabaseCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en-US")
                .HasAnnotation("Npgsql:DatabaseTemplate", "template0")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Everyday.Domain.Entities.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("double precision")
                        .HasColumnName("carbohydrates");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("Energy")
                        .HasColumnType("double precision")
                        .HasColumnName("energy");

                    b.Property<double?>("Fat")
                        .HasColumnType("double precision")
                        .HasColumnName("fat");

                    b.Property<double?>("Fiber")
                        .HasColumnType("double precision")
                        .HasColumnName("fiber");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("itemid");

                    b.Property<double?>("Protein")
                        .HasColumnType("double precision")
                        .HasColumnName("protein");

                    b.Property<double?>("Salt")
                        .HasColumnType("double precision")
                        .HasColumnName("salt");

                    b.Property<double?>("SaturatedFat")
                        .HasColumnType("double precision")
                        .HasColumnName("saturatedfat");

                    b.Property<double?>("Sugars")
                        .HasColumnType("double precision")
                        .HasColumnName("sugars");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("consumables");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsReusable")
                        .HasColumnType("boolean")
                        .HasColumnName("isreusable");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("itemid");

                    b.Property<int>("TrashTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("trashtypeid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("containers");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("categoryid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("description");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("dictionaries");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.DictionaryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "dictionarycategories_name_key")
                        .IsUnique();

                    b.ToTable("dictionarycategories");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.ExistingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("itemid");

                    b.Property<double>("Qty")
                        .HasColumnType("double precision")
                        .HasColumnName("qty");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("existingitems");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("Depth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth");

                    b.Property<string>("Description")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("description");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<int>("ItemDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("itemdefinitionid");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("integer")
                        .HasColumnName("manufacturerid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<double?>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("ItemDefinitionId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex(new[] { "Code" }, "uq_items_code")
                        .IsUnique();

                    b.ToTable("items");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.ItemDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContainerId")
                        .HasColumnType("integer")
                        .HasColumnName("containerid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DimensionsMeasureUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("dimensionsmeasureunitid");

                    b.Property<int>("ItemCategoryTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("itemcategorytypeid");

                    b.Property<int>("WeightMeasureUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("weightmeasureunitid");

                    b.HasKey("Id");

                    b.ToTable("itemdefinitions");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "manufacturers_name_key")
                        .IsUnique();

                    b.ToTable("manufacturers");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("signature");

                    b.HasKey("Id");

                    b.ToTable("measureunits");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "roles_name_key")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Login" }, "users_login_key")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("userroles");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Consumable", b =>
                {
                    b.HasOne("Everyday.Domain.Entities.Item", "Item")
                        .WithMany("Consumables")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("consumables_itemid_fkey");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Container", b =>
                {
                    b.HasOne("Everyday.Domain.Entities.Item", "Item")
                        .WithMany("Containers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("containers_itemid_fkey");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Dictionary", b =>
                {
                    b.HasOne("Everyday.Domain.Entities.DictionaryCategory", "Category")
                        .WithMany("Dictionaries")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("dict_dictcat_fk_categoryid");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.ExistingItem", b =>
                {
                    b.HasOne("Everyday.Domain.Entities.Item", "Item")
                        .WithMany("ExistingItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("existingitems_itemid_fkey");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Item", b =>
                {
                    b.HasOne("Everyday.Domain.Entities.ItemDefinition", "ItemDefinition")
                        .WithMany("Items")
                        .HasForeignKey("ItemDefinitionId")
                        .IsRequired()
                        .HasConstraintName("items_itemdefinitionid_fkey");

                    b.HasOne("Everyday.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Items")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("items_manufacturerid_fkey");

                    b.Navigation("ItemDefinition");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.DictionaryCategory", b =>
                {
                    b.Navigation("Dictionaries");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Item", b =>
                {
                    b.Navigation("Consumables");

                    b.Navigation("Containers");

                    b.Navigation("ExistingItems");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.ItemDefinition", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Everyday.Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
